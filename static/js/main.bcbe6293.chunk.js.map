{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","App.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","console","log","className","map","div","key","layout","whileHover","opacity","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","types","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAeAA,gBAVqB,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAKT,IAAMC,EAAiBR,YAEjBS,EAAmBT,cACnBU,EAAYV,YAAmBW,WAAWC,gBCEjCC,EAnBM,SAACC,GAAgB,IAAD,EACXC,mBAAS,IADE,mBAC5BC,EAD4B,KACtBC,EADsB,KAiBnC,OAdAC,qBAAU,WACR,IAAMC,EAAQV,EACXK,WAAWA,GACXM,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACX,IAAIC,EAAY,GAChBD,EAAKE,SAAQ,SAACC,GACZF,EAAUG,KAAV,2BAAoBD,EAAIE,QAAxB,IAAgCC,GAAIH,EAAIG,SAE1CX,EAAQM,MAEZ,OAAO,kBAAMJ,OACZ,CAACL,IAEG,CAAEE,S,OCaIa,EA7BG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACXd,EAASH,EAAa,UAAtBG,KAER,OADAe,QAAQC,IAAIhB,GAEV,yBAAKiB,UAAU,YACZjB,GACCA,EAAKkB,KAAI,SAACT,GAAD,OACP,kBAAC,IAAOU,IAAR,CACEF,UAAU,WACVG,IAAKX,EAAIG,GACTS,QAAM,EACNC,WAAY,CAAEC,QAAS,GACvBC,QAAS,WACPV,EAAeL,EAAIgB,OAGrB,kBAAC,IAAOC,IAAR,CACEC,IAAKlB,EAAIgB,IACTG,IAAI,gBACJC,QAAS,CAAEN,QAAS,GACpBO,QAAS,CAAEP,QAAS,GACpBQ,WAAY,CAAEC,MAAO,WCEpBC,EAxBD,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAapB,EAAqB,EAArBA,eAO5B,OACE,kBAAC,IAAOK,IAAR,CACEF,UAAU,WACVO,QATgB,SAACW,GACfA,EAAEC,OAAOC,UAAUC,SAAS,aAC9BxB,EAAe,OAQfe,QAAS,CAAEN,QAAS,GACpBO,QAAS,CAAEP,QAAS,IAEpB,kBAAC,IAAOG,IAAR,CACEC,IAAKO,EACLN,IAAI,eACJC,QAAS,CAAEU,EAAG,UACdT,QAAS,CAAES,EAAG,OCTPC,EAVD,WACZ,OACE,yBAAKvB,UAAU,SACb,wCACA,6CACA,qE,wBC4BSwB,EA/BI,SAACC,GAAU,IAAD,EACK3C,mBAAS,GADd,mBACpB4C,EADoB,KACVC,EADU,OAED7C,mBAAS,MAFR,mBAEpB8C,EAFoB,KAEbC,EAFa,OAGL/C,mBAAS,MAHJ,mBAGpB0B,EAHoB,KAGfsB,EAHe,KA4B3B,OAvBA7C,qBAAU,WAER,IAAM8C,EAAaxD,EAAeyD,IAAIP,EAAKQ,MACrCC,EAAgB1D,EAAiBK,WAAW,UAElDkD,EAAWI,IAAIV,GAAMW,GACnB,iBACA,SAAC/C,GACC,IAAIgD,EAAchD,EAAKiD,iBAAmBjD,EAAKkD,WAAc,IAC7DZ,EAAYU,MAEd,SAACG,GACCX,EAASW,KAPb,sBASE,8BAAAC,EAAA,sEACoBV,EAAWW,iBAD/B,OACQlC,EADR,OAEQmC,EAAYlE,IAClByD,EAAcU,IAAI,CAAEpC,MAAKmC,cACzBb,EAAOtB,GAJT,8CAOD,CAACiB,IAEG,CAAEC,WAAUlB,MAAKoB,UCVXiB,EAlBK,SAAC,GAAuB,IAArBpB,EAAoB,EAApBA,KAAMqB,EAAc,EAAdA,QAAc,EACftB,EAAWC,GAA7BjB,EADiC,EACjCA,IAAKkB,EAD4B,EAC5BA,SAOb,OANAzC,qBAAU,WACJuB,GACFsC,EAAQ,QAET,CAACtC,EAAKsC,IAGP,kBAAC,IAAO5C,IAAR,CACEF,UAAU,eAGVY,QAAS,CAAEmC,MAAO,GAClBlC,QAAS,CAAEkC,MAAOrB,EAAW,QCiBpBsB,EAhCI,WAAO,IAAD,EACClE,mBAAS,MADV,mBAChB2C,EADgB,KACVqB,EADU,OAEGhE,mBAAS,MAFZ,mBAEhB8C,EAFgB,KAETC,EAFS,KAIjBoB,EAAQ,CAAC,YAAa,aAAc,aAa1C,OACE,8BACE,+BACE,2BAAOC,KAAK,OAAOC,SAdH,SAACjC,GACrB,IAAIkC,EAAWlC,EAAEC,OAAOkC,MAAM,GAC1BD,GAAYH,EAAMK,SAASF,EAASF,OACtCJ,EAAQM,GACRvB,GAAS,KAETiB,EAAQ,MACRjB,EAAS,wDAQP,oCAEF,yBAAK7B,UAAU,UACZ4B,GAAS,yBAAK5B,UAAU,SAAS4B,GACjCH,GAAQ,6BAAMA,EAAKQ,MACnBR,GAAQ,kBAAC,EAAD,CAAaA,KAAMA,EAAMqB,QAASA,OCRpCS,MAff,WAAgB,IAAD,EACyBzE,mBAAS,MADlC,mBACNmC,EADM,KACOpB,EADP,KAGb,OACE,yBAAKG,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWH,eAAgBA,IAC1BoB,GACC,kBAAC,EAAD,CAAOA,YAAaA,EAAapB,eAAgBA,MCVzD2D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.bcbe6293.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport \"firebase/firestore\";\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAhVzZ8JK6jqBtqkIdJx6HkIiz63PItcPM\",\n  authDomain: \"firegram-98f24.firebaseapp.com\",\n  databaseURL: \"https://firegram-98f24.firebaseio.com\",\n  projectId: \"firegram-98f24\",\n  storageBucket: \"firegram-98f24.appspot.com\",\n  messagingSenderId: \"288945106525\",\n  appId: \"1:288945106525:web:246b25370dd29783c1a7b4\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst projectStorage = firebase.storage();\n\nconst projectFirestore = firebase.firestore();\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\nexport { projectStorage, projectFirestore, timestamp };\n","import { useState, useEffect } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useState([]);\n\n  useEffect(() => {\n    const unsub = projectFirestore\n      .collection(collection)\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot((snap) => {\n        let documents = [];\n        snap.forEach((doc) => {\n          documents.push({ ...doc.data(), id: doc.id });\n        });\n        setDocs(documents);\n      });\n    return () => unsub();\n  }, [collection]);\n\n  return { docs };\n};\nexport default useFirestore;\n","import React from \"react\";\nimport useFirestore from \"../hooks/useFirestore\";\nimport { motion } from \"framer-motion\";\n\nconst ImageGrid = ({ setSelectedImg }) => {\n  const { docs } = useFirestore(\"images\");\n  console.log(docs);\n  return (\n    <div className=\"img-grid\">\n      {docs &&\n        docs.map((doc) => (\n          <motion.div\n            className=\"img-wrap\"\n            key={doc.id}\n            layout\n            whileHover={{ opacity: 1 }}\n            onClick={() => {\n              setSelectedImg(doc.url);\n            }}\n          >\n            <motion.img\n              src={doc.url}\n              alt=\"not available\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 1 }}\n            />\n          </motion.div>\n        ))}\n    </div>\n  );\n};\n\nexport default ImageGrid;\n","import React from \"react\";\nimport { motion } from \"framer-motion\";\n\nconst Modal = ({ selectedImg, setSelectedImg }) => {\n  const handleClick = (e) => {\n    if (e.target.classList.contains(\"backdrop\")) {\n      setSelectedImg(null);\n    }\n  };\n\n  return (\n    <motion.div\n      className=\"backdrop\"\n      onClick={handleClick}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <motion.img\n        src={selectedImg}\n        alt=\"enlarged pic\"\n        initial={{ y: \"-100vh\" }}\n        animate={{ y: 0 }}\n      />\n    </motion.div>\n  );\n};\n\nexport default Modal;\n","import React from \"react\";\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Customize your own GALERIE DE PHOTOS</p>\n    </div>\n  );\n};\n\nexport default Title;\n","import { useState, useEffect } from \"react\";\nimport { projectStorage } from \"../firebase/config\";\nimport { projectFirestore, timestamp } from \"../firebase/config\";\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  useEffect(() => {\n    //referrences\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection(\"images\");\n\n    storageRef.put(file).on(\n      \"state_changed\",\n      (snap) => {\n        let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n        setProgress(percentage);\n      },\n      (err) => {\n        setError(err);\n      },\n      async () => {\n        const url = await storageRef.getDownloadURL();\n        const createdAt = timestamp();\n        collectionRef.add({ url, createdAt });\n        setUrl(url);\n      }\n    );\n  }, [file]);\n\n  return { progress, url, error };\n};\n\nexport default useStorage;\n","import React, { useEffect } from \"react\";\nimport useStorage from \"../hooks/useStorage\";\nimport { motion } from \"framer-motion\";\n\nconst ProgressBar = ({ file, setFile }) => {\n  const { url, progress } = useStorage(file);\n  useEffect(() => {\n    if (url) {\n      setFile(null);\n    }\n  }, [url, setFile]);\n\n  return (\n    <motion.div\n      className=\"progress-bar\"\n      //style={{ width: progress + \"%\" }}\n\n      initial={{ width: 0 }}\n      animate={{ width: progress + \"%\" }}\n    ></motion.div>\n  );\n};\nexport default ProgressBar;\n","import React, { useState } from \"react\";\nimport ProgressBar from \"./ProgressBar\";\n\nconst UploadForm = () => {\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState(null);\n\n  const types = [\"image/png\", \"image/jpeg\", \"image/jpg\"];\n\n  const changeHandler = (e) => {\n    let selected = e.target.files[0];\n    if (selected && types.includes(selected.type)) {\n      setFile(selected);\n      setError(false);\n    } else {\n      setFile(null);\n      setError(\"Please select an image file (png or jpeg or jpg)\");\n    }\n  };\n\n  return (\n    <form>\n      <label>\n        <input type=\"file\" onChange={changeHandler} />\n        <span>+</span>\n      </label>\n      <div className=\"output\">\n        {error && <div className=\"error\">{error}</div>}\n        {file && <div>{file.name}</div>}\n        {file && <ProgressBar file={file} setFile={setFile} />}\n      </div>\n    </form>\n  );\n};\n\nexport default UploadForm;\n","import React, { useState } from \"react\";\nimport ImageGrid from \"./comps/ImageGrid\";\nimport Modal from \"./comps/Modal\";\nimport Title from \"./comps/Title\";\nimport UploadForm from \"./comps/UploadForm\";\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImg && (\n        <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}